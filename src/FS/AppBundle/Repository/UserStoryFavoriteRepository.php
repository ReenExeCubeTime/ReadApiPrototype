<?php

namespace FS\AppBundle\Repository;

use Doctrine\DBAL\Exception\UniqueConstraintViolationException;
use FS\AppBundle\Entity\Story;
use FS\AppBundle\Entity\User;
use FS\AppBundle\Entity\UserStoryFavorite;

/**
 * UserStoryFavoriteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserStoryFavoriteRepository extends \Doctrine\ORM\EntityRepository
{
    public function getTotalMap(array $stories)
    {
        return $this
            ->createQueryBuilder('usf')
            ->select('usf.storyId, COUNT(usf.id) AS total')
            ->where('usf.storyId IN (:stories)')
            ->setParameters([
                'stories' => $stories,
            ])
            ->addGroupBy('usf.storyId')
            ->getQuery()
            ->getArrayResult();
    }

    public function inFaveList(User $user, array $stories)
    {
        return $this
            ->createQueryBuilder('usf')
            ->select('usf.storyId')
            ->where(
                'usf.storyId IN (:stories)',
                'usf.user = :user'
            )
            ->setParameters([
                'stories' => $stories,
                'user' => $user,
            ])
            ->addGroupBy('usf.storyId')
            ->getQuery()
            ->getArrayResult();
    }

    public function create(Story $story, User $user)
    {
        $link = new UserStoryFavorite();
        $link
            ->setStory($story)
            ->setUser($user)
            ->setCreated(new \DateTime());

        try {
            $this->getEntityManager()->persist($link);
            $this->getEntityManager()->flush($link);
        } catch (UniqueConstraintViolationException $e) {
            /**
             * Double can logging
             */
        }
    }

    public function remove(Story $story, User $user)
    {
        $link = $this->findOneBy([
            'story' => $story,
            'user' => $user,
        ]);

        if ($link) {
            $this->getEntityManager()->remove($link);
            $this->getEntityManager()->flush($link);
        }
    }
}
